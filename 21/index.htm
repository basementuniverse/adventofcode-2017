<textarea id="input">
../.. => .../#../#..
#./.. => ###/#.#/.#.
##/.. => ###/.##/##.
.#/#. => .#./..#/...
##/#. => ##./.##/#..
##/## => #.#/###/.##
.../.../... => #.#./.#.#/#.#./###.
#../.../... => #..#/.###/##../##..
.#./.../... => #.##/####/.###/....
##./.../... => ####/.#../#.##/#.##
#.#/.../... => ..../#.../.##./#.##
###/.../... => .###/.#../...#/.#..
.#./#../... => .###/#..#/#.../#...
##./#../... => ..##/...#/#.##/..##
..#/#../... => #.##/.#../...#/..##
#.#/#../... => #.##/..##/..../##.#
.##/#../... => .###/.###/#.../....
###/#../... => #.../####/.#.#/....
.../.#./... => ...#/##.#/...#/###.
#../.#./... => #.#./####/.#../##.#
.#./.#./... => #..#/.##./..##/...#
##./.#./... => ###./#.#./#.../###.
#.#/.#./... => ..#./###./####/.#.#
###/.#./... => .#.#/#..#/..#./#..#
.#./##./... => ####/##../##../..##
##./##./... => #.../..##/#.#./....
..#/##./... => ..../#..#/.#../#..#
#.#/##./... => ###./..##/#.#./#...
.##/##./... => ...#/#..#/####/...#
###/##./... => ..../#.##/###./...#
.../#.#/... => #.../#.../...#/#...
#../#.#/... => ##../#..#/.##./.##.
.#./#.#/... => ##../.###/#.##/#.#.
##./#.#/... => ##.#/.#.#/#.#./..#.
#.#/#.#/... => .##./...#/...#/.#..
###/#.#/... => ####/..#./###./#.##
.../###/... => #..#/.#.#/#.##/..#.
#../###/... => .#../##../##../#.##
.#./###/... => #.#./...#/#.#./#.##
##./###/... => #.#./#..#/.###/.###
#.#/###/... => ..#./...#/..#./#..#
###/###/... => ##../###./####/....
..#/.../#.. => ##../.#../#.#./.##.
#.#/.../#.. => .##./##.#/.#../#...
.##/.../#.. => ####/..#./#..#/##..
###/.../#.. => #.#./..../..#./####
.##/#../#.. => ..##/..##/.##./##..
###/#../#.. => #..#/#..#/.##./.#..
..#/.#./#.. => #..#/#.##/##../#..#
#.#/.#./#.. => .#.#/.#.#/.##./.#.#
.##/.#./#.. => ####/#.##/..../.###
###/.#./#.. => #..#/.#.#/.##./....
.##/##./#.. => ###./##../#..#/....
###/##./#.. => ...#/.#../.#../....
#../..#/#.. => ###./#.../..##/#...
.#./..#/#.. => .#../#.##/.##./..#.
##./..#/#.. => ..#./.##./..../..##
#.#/..#/#.. => #.#./###./.#.#/#..#
.##/..#/#.. => ####/..##/###./.#.#
###/..#/#.. => ##.#/.##./.###/###.
#../#.#/#.. => ..../#.##/.#.#/#..#
.#./#.#/#.. => .###/..../.###/#.##
##./#.#/#.. => ####/..##/#.##/#.##
..#/#.#/#.. => ..#./..##/####/#...
#.#/#.#/#.. => .##./.#.#/.#.#/##..
.##/#.#/#.. => ##.#/##.#/#.##/.###
###/#.#/#.. => #..#/.##./#.##/.###
#../.##/#.. => ####/...#/..##/##..
.#./.##/#.. => .##./#.##/...#/#...
##./.##/#.. => .##./..#./###./....
#.#/.##/#.. => .#.#/##.#/..#./##.#
.##/.##/#.. => ###./####/.##./####
###/.##/#.. => ..#./##.#/.#../..#.
#../###/#.. => ##../#.##/#.../.#.#
.#./###/#.. => ..#./#.##/...#/...#
##./###/#.. => .###/###./.##./###.
..#/###/#.. => #.../..../#.../#...
#.#/###/#.. => .###/...#/...#/..#.
.##/###/#.. => #.#./..../###./.#.#
###/###/#.. => #..#/#.../#.##/##.#
.#./#.#/.#. => .#../##../..##/#.##
##./#.#/.#. => #.##/#.#./#..#/##.#
#.#/#.#/.#. => #..#/.###/..../###.
###/#.#/.#. => #.#./.#.#/####/#.#.
.#./###/.#. => ..##/..#./..##/###.
##./###/.#. => ##../#.#./#.#./.#..
#.#/###/.#. => ####/.##./####/#.#.
###/###/.#. => ####/..#./####/....
#.#/..#/##. => ###./..#./.#../...#
###/..#/##. => #.#./#.##/#..#/##..
.##/#.#/##. => ..../.#../..../....
###/#.#/##. => .###/..#./#.#./####
#.#/.##/##. => ..../.#.#/#.#./...#
###/.##/##. => ##../.#../.#.#/..##
.##/###/##. => ..#./#.#./##../..##
###/###/##. => ..#./###./#.#./..##
#.#/.../#.# => #.#./..../#.##/.#.#
###/.../#.# => #.##/#.../..##/...#
###/#../#.# => ####/.###/..#./.#.#
#.#/.#./#.# => ..#./#..#/#..#/##..
###/.#./#.# => ..../##../.#.#/##.#
###/##./#.# => ..##/..##/.#../####
#.#/#.#/#.# => ####/...#/#.#./#.#.
###/#.#/#.# => #.##/...#/..#./...#
#.#/###/#.# => #.##/####/#..#/..##
###/###/#.# => .##./.##./.##./.#..
###/#.#/### => .#../..../..../.###
###/###/### => #.#./#.#./###./###.
</textarea>
<textarea id="test-1">
../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#
</textarea>
<textarea id="image">
.#.
..#
###
</textarea>
<textarea id="image-2">
a11b22
111222
111222
c33d44
333444
333444
</textarea>
<textarea id="image-3">
a111b222
11112222
11112222
11112222
c333d444
33334444
33334444
33334444
</textarea>
<textarea id="image-4">
a1b2c3
112233
d4e5f6
445566
g7h8i9
778899
</textarea>
<script>

const input = document.querySelector('#input').value.trim().split('\n').map(r => r.split(' => ').map(c => c.replace(/\//g, '')));
let image = document.querySelector('#image').value.trim().replace(/\n/g, '');
const divisibleBy2 = n => n % 2 == 0;

const rules = {};
for (let i = input.length; i--;) {
    let p = permutations(input[i][0]);
    for (let j = p.length; j--;) {
        rules[p[j]] = input[i][1];
    }
}

for (let i = 0; i < 18; i++) {
    image = iterate(image);
    if (i == 4) {
        console.log(`Part 1: ${countPixels(image)}`);
    }
    if (i == 17) {
        console.log(`Part 2: ${countPixels(image)}`);
    }
}

function countPixels(image) {
    return image.split('').filter(c => c == '#').length;
}

function iterate(image) {
    const size = image.length;
    const images = split(image, divisibleBy2(size) ? 2 : 3);
    for (let i = 0; i < images.length; i++) {
        if (!rules[images[i]]) {
            debugger;
        }
        images[i] = rules[images[i]];
    }
    return join(images);
}

function split(image, n) {
    const result = {};
    const size = Math.sqrt(image.length);
    for (let y = 0; y < size; y++) {
        for (let x = 0; x < size; x++) {
            let h = Math.floor(x / n) + '_' + Math.floor(y / n);
            if (!result[h]) {
                result[h] = [];
            }
            result[h].push(image[y * size + x]);
        }
    }
    return Object.keys(result).map(k => result[k].join(''));
}

function join(images) {
    const result = [];
    const size = Math.sqrt(images.length);
    const imageSize = Math.sqrt(images[0].length);
    const totalSize = size * imageSize;
    for (let y = 0; y < totalSize; y++) {
        for (let x = 0; x < totalSize; x++) {
            let ix = Math.floor(x / imageSize);
            let iy = Math.floor(y / imageSize);
            let px = x - (ix * imageSize);
            let py = y - (iy * imageSize);
            result.push(images[iy * size + ix][py * imageSize + px]);
        }
    }
    return result.join('');
}

function rotate(image) {
    const result = [];
    const size = Math.sqrt(image.length);
    for (let x = 0; x < size; x++) {
        for (let y = size - 1; y >= 0; y--) {
            result.push(image[y * size + x]);
        }
    }
    return result.join('');
}

function flip(image) {
    const result = [];
    const size = Math.sqrt(image.length);
    for (let y = size - 1; y >= 0; y--) {
        for (let x = 0; x < size; x++) {
            result.push(image[y * size + x]);
        }
    }
    return result.join('');
}

function permutations(image) {
    const r0 = image;
    const r1 = rotate(r0);
    const r2 = rotate(r1);
    const r3 = rotate(r2);
    const f0 = flip(image);
    const f1 = rotate(f0);
    const f2 = rotate(f1);
    const f3 = rotate(f2);
    return [r0, r1, r2, r3, f0, f1, f2, f3];
}

</script>
