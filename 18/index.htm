<textarea id="input">
set i 31
set a 1
mul p 17
jgz p p
mul a 2
add i -1
jgz i -2
add a -1
set i 127
set p 735
mul p 8505
mod p a
mul p 129749
add p 12345
mod p a
set b p
mod b 10000
snd b
add i -1
jgz i -9
jgz a 3
rcv b
jgz b -1
set f 0
set i 126
rcv a
rcv b
set p a
mul p -1
add p b
jgz p 4
snd a
set a b
jgz 1 3
snd b
set f 1
add i -1
jgz i -11
snd a
jgz f -16
jgz a -19
</textarea>
<textarea id="test1">
set a 1
add a 2
mul a a
mod a 5
snd a
set a 0
rcv a
jgz a -1
set a 1
jgz a -2
</textarea>
<textarea id="test2">
snd 1
snd 2
snd p
rcv a
rcv b
rcv c
rcv d
</textarea>
<script>

const input = document.querySelector('#input').value.trim().split('\n').map(parseInput);
function parseInput(i) {
    const parts = i.split(' ');
    return { command: parts[0], operandA: parts[1], operandB: parts[2] || '' };
}

const alphabet = [...Array(26).keys()].map(i => String.fromCharCode(i + 97));

// Part 1
(() => {
    const registers = {};
    const reg = v => alphabet.indexOf(v) > -1 ? registers[v] : parseFloat(v);
    for (let i = alphabet.length; i--;) {
        registers[alphabet[i]] = 0;
    }
    
    let ip = 0;
    const sounds = [];

    const commands = {
        snd: function(a) {
            sounds.push(reg(a));
            return 1;
        },
        set: function(a, b) {
            registers[a] = reg(b);
            return 1;
        },
        add: function(a, b) {
            registers[a] += reg(b);
            return 1;
        },
        mul: function(a, b) {
            registers[a] *= reg(b);
            return 1;
        },
        mod: function(a, b) {
            registers[a] %= reg(b);
            return 1;
        },
        rcv: function(a) {
            if (registers[a] != 0) {
                console.log(`played sound ${sounds[sounds.length - 1]}`);
            }
            return 1;
        },
        jgz: function(a, b) {
            if (registers[a] > 0) {
                return reg(b);
            }
            return 1;
        }
    };

    const MAX = 10000;
    let i = 0;
    while (i++ < MAX) {
        if (ip < 0 || ip >= input.length) {
            console.log(`terminating at ${i}`);
            break;
        }
        ip += commands[input[ip].command](input[ip].operandA, input[ip].operandB);
        if (i % 1000 == 0) {
            console.log(`running at ${i}`);
        }
    }
});//();

// Part 2
(() => {
    const a = { id: 0, registers: {}, ip: 0, queue: [], wait: false, term: false, send: 0 };
    const b = { id: 1, registers: {}, ip: 0, queue: [], wait: false, term: false, send: 0 };
    const reg = function(p) {
        return v => alphabet.indexOf(v) > -1 ? p.registers[v] : parseFloat(v);
    };
    a.reg = reg(a);
    b.reg = reg(b);
    alphabet.forEach(v => { a.registers[alphabet[v]] = b.registers[alphabet[v]] = 0; });
    a.registers['p'] = 0;
    b.registers['p'] = 1;
    a.other = b;
    b.other = a;

    const commands = {
        snd: function(p, a) {
            p.send++;
            p.other.queue.push(p.reg(a));
            return 1;
        },
        set: function(p, a, b) {
            p.registers[a] = p.reg(b);
            return 1;
        },
        add: function(p, a, b) {
            p.registers[a] += p.reg(b);
            return 1;
        },
        mul: function(p, a, b) {
            p.registers[a] *= p.reg(b);
            return 1;
        },
        mod: function(p, a, b) {
            p.registers[a] %= p.reg(b);
            return 1;
        },
        rcv: function(p, a) {
            if (p.queue.length > 0) {
                p.registers[a] = p.queue.shift();
                return 1;
            }
            p.wait = true;
            return 0;
        },
        jgz: function(p, a, b) {
            if (p.reg(a) > 0) {
                return p.reg(b);
            }
            return 1;
        }
    };

    const MAX = 100000;
    let i = 0;
    while (i++ < MAX) {
        if (a.ip < 0 || a.ip >= input.length) {
            a.term = i;
        }
        if (b.ip < 0 || b.ip >= input.length) {
            b.term = i;
        }
        if (a.term && b.term) {
            console.log(`both terminated at ${i} (a: ${a.term}, b: ${b.term})`);
            break;
        }
        a.wait = false;
        b.wait = false;
        a.ip += commands[input[a.ip].command](a, input[a.ip].operandA, input[a.ip].operandB);
        b.ip += commands[input[b.ip].command](b, input[b.ip].operandA, input[b.ip].operandB);
        if (a.wait && b.wait) {
            console.log(`both waiting at ${i}`);
            break;
        }
        if (i % 1000 == 0) {
            console.log(`running at ${i}`);
        }
    }
    console.log(`Part 2: ${b.send}`);
})();

</script>