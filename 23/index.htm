<textarea id="input">
set b 57
set c b
jnz a 2
jnz 1 5
mul b 100
sub b -100000
set c b
sub c -17000
set f 1
set d 2
set e 2
set g d
mul g e
sub g b
jnz g 2
set f 0
sub e -1
set g e
sub g b
jnz g -8
sub d -1
set g d
sub g b
jnz g -13
jnz f 2
sub h -1
set g b
sub g c
jnz g 2
jnz 1 3
sub b -17
jnz 1 -23
</textarea>
<script>

const input = document.querySelector('#input').value.trim().split('\n').map(parseInput);
function parseInput(i) {
    const parts = i.split(' ');
    return { command: parts[0], operandA: parts[1], operandB: parts[2] || '' };
}

const alphabet = [...Array(8).keys()].map(i => String.fromCharCode(i + 97));

const registers = {};
const reg = v => alphabet.indexOf(v) > -1 ? registers[v] : parseFloat(v);
for (let i = alphabet.length; i--;) {
    registers[alphabet[i]] = 0;
}

let ip = 0;
let countMul = 0;
const commands = {
    set: function(a, b) {
        registers[a] = reg(b);
        return 1;
    },
    sub: function(a, b) {
        registers[a] -= reg(b);
        return 1;
    },
    mul: function(a, b) {
        countMul++;
        registers[a] *= reg(b);
        return 1;
    },
    jnz: function(a, b) {
        if (registers[a] != 0) {
            return reg(b);
        }
        return 1;
    }
};
const MAX = 100000000;
let i = 0;
while (i++ < MAX) {
    if (ip < 0 || ip >= input.length) {
        // console.log(`terminating at ${i}`);
        break;
    }
    ip += commands[input[ip].command](input[ip].operandA, input[ip].operandB);
    if (i % 1000 == 0) {
        // console.log(`running at ${i}`);
    }
}
console.log(`Part 1: ${countMul}`);

// Part 2 - disassembling by hand...

/*

set b 57        b = 57
set c b         c = b
jnz a 2         if (a != 0) goto jump1
jnz 1 5         goto jump2
mul b 100       jump1: b *= 100
sub b -100000   b += 100000
set c b         c = b
sub c -17000    c += 17000
set f 1         jump2: f = 1
set d 2         d = 2
set e 2         jump5: e = 2
set g d         jump4: g = d
mul g e         g *= e
sub g b         g -= b
jnz g 2         if (g != 0) goto jump3
set f 0         f = 0
sub e -1        jump3: e++
set g e         g = e
sub g b         g -= b
jnz g -8        if (g != 0) goto jump4
sub d -1        d++
set g d         g = d
sub g b         g -= b
jnz g -13       if (g != 0) goto jump5
jnz f 2         if (f != 0) goto jump6
sub h -1        h++
set g b         jump6: g = b
sub g c         g -= c
jnz g 2         if (g != 0) goto jump7
jnz 1 3         return
sub b -17       jump7: b += 17
jnz 1 -23       goto jump2

------------------------------------------

b = 57
c = b

if (a != 0) {
    b *= 100
    b += 100000
    c = b
    c += 17000
}

while (true) {
    f = 1
    d = 2

    do {
        e = 2

        do {
            g = d
            g *= e
            g -= b

            if (g == 0) {
                f = 0
            }

            e++
            g = e
            g -= b
        } while (g != 0)

        d++
        g = d
        g -= b
    } while (g != 0)

    if (f == 0) {
        h++
    }

    g = b
    g -= c

    if (g == 0) {
        break;
    }

    b += 17
}

------------------------------------------

b = 57;
c = b;

if (a != 0) {
    b *= 100;
    b += 100000;
    c = b;
    c += 17000;
}

do {
    f = 1;
    d = 2;
    e = 2;

    for (d = 2; d < b; d++) {
        if (b % d == 0) {
            f = 0;
            break;
        }
    }

    if (f == 0) {
        h++;
    }
    g = b - c;
    b += 17;
} while (g != 0);

*/

let a = 1, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
b = 57;
c = b;

if (a != 0) {
    b *= 100;
    b += 100000;
    c = b;
    c += 17000;
}

do {
    f = 1;
    d = 2;
    e = 2;

    for (d = 2; d < b; d++) {
        if (b % d == 0) {
            f = 0;
            break;
        }
    }

    if (f == 0) {
        h++;
    }
    g = b - c;
    b += 17;
} while (g != 0);
console.log(`Part 2: ${h}`);

</script>
